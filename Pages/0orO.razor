@page "/0orO"
@using System.Text

<title>Zero or Not Zero Tool</title>
<h1>Zero or Not Zero Tool</h1>
<div class="top_display">
    <EditForm Model="@this">
        <InputRadioGroup @bind-Value="selectedValue" @onchange="@(e=>{test();})">
            <InputRadio Value=1>To Chr</InputRadio>To Chr
            <InputRadio Value=2>To ASCII</InputRadio>To ASCII
            <InputRadio Value=3>To UNICODE</InputRadio>To UNICODE
        </InputRadioGroup>
    </EditForm>
</div>
<div class="top_display">
    <textarea type="text" id="text_field_in" name="text_field_in" placeholder="                                 Copy/Paste text here." 
    @bind="InputValue" @oninput="@(e => { InputValue = e.Value.ToString(); UpdateLabel(); })"/>
</div>
<div class="bottom_display">
    <label id="label_field_out">@LabelValue</label>
</div>


@code {
    private FormModel formModel = new FormModel();
    private string InputValue { get; set; }
    private string LabelValue { get; set; }
    private string StringBuilder { get; set; }
    private int selectedValue = 0;
    //private void UpdateLabel() {
    //    LabelValue = InputValue.ToLower();
    //}
    private void test()
    {
        switch (selectedValue)
        {
            case 1:
                LabelValue = $"To Chr: {InputValue.ToLower()}";
                break;
            case 2:
                LabelValue = string.Join(" ", InputValue.Select(c => ((int)c).ToString()));
                break;
            case 3:
                LabelValue = $"To UNICODE: {InputValue.ToLower()}";
                break;
            default:
                LabelValue = "Please choose which option would you like to use.";
                break;
        }
    }
    private string ConvertToUnicodeString(string input)
    {

        if (string.IsNullOrEmpty(input))
        {
            return string.Empty;
        }
        StringBuilder sb = new StringBuilder();
        foreach (char c in input)
        {
            sb.AppendFormat("\\u{0:X4}", (int)c);
        }

        return sb.ToString();
    }
    private string ConvertToCharArray(string e)
    {
        formModel.InputString = e.ToString();
        formModel.CharArray = formModel.InputString.ToCharArray();
        formModel.CharArrayAsString = new string(formModel.CharArray);
        string result = new string(formModel.CharArray);
        return result;
        //return formModel.ToString();
    }

    public class FormModel
    {
        public string InputString { get; set; }
        public char[] CharArray { get; set; } = Array.Empty<char>();
        public string CharArrayAsString { get; set; } = string.Empty;
    }

    private void UpdateLabel()
    {
        switch (selectedValue)
        {
            case 1:
                LabelValue = ConvertToCharArray(InputValue); ;
                break;
            case 2:
                LabelValue = string.Join(" ", InputValue.Select(c => ((int)c).ToString()));
                break;
            case 3:
                LabelValue = ConvertToUnicodeString(InputValue);
                break;
            default:
                LabelValue = "Please choose which option would you like to use.";
                break;
        }
    }
}