@page "/minutesmaker"
@inject HttpClient Http
@using System.Text;
@using Microsoft.JSInterop;
@using System.IO
@inject IJSRuntime JS

<title>Minutes Maker</title>
<h1 @onclick="ShowDescription" style="cursor: pointer;">
    Minutes Maker
</h1>
<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
      const arrayBuffer = await contentStreamReference.arrayBuffer();
      const blob = new Blob([arrayBuffer]);
      const url = URL.createObjectURL(blob);
      const anchorElement = document.createElement('a');
      anchorElement.href = url;
      anchorElement.download = fileName ?? '';
      anchorElement.click();
      anchorElement.remove();
      URL.revokeObjectURL(url);
    }
</script>
@if (!showTextD){

    <div class="left_display">
        <div class="text_area_wrapper">
            <textarea id="text_field_in"
                      name="text_field_in"
                      placeholder="Type here. Hashtag on the first line will be the file name. Enter will generate a new point."
                      @bind="InputValue"
                      @oninput="@(e => { InputValue = e.Value.ToString(); })">
            </textarea>
        </div>
        <div class="button_wrapper">
            <button @onclick="DownloadNotes">Download</button>
        </div>
    </div>

}

@if (showTextD)
{
    <div class="sticky_right">
        Minutes maker is a tool to make taking meeting notes easier. Have you ever tried to note down things that come up in the meetings and you quickly open up notepad.exe and then you need to save the file choose location and click save?
        <br />
        <br />
        With this tool you can make notes quicker, without a need to open notepad and as you finish the meeting just click Download to save your notes to your downloads folder with the current date and time. If you need a custom notes name for the file just start the first line with # like #name of the meeting, then you can start every new note/thought in new line and it will become a bullet point in your text file.
        <br />
        <br />
        The information noted down with this tool is not stored on any server, there is no temporary place that the data is being converted in.
        <br />
        <br />
    </div>
}

@code {
    private bool showTextD = false;
    private void ShowDescription() => showTextD = !showTextD;

    private string InputValue { get; set; }
    private string filename_hash;

    private Stream GetFileStream()
    {
        string userInput = (InputValue).Trim();

        string firstLine = userInput.Split('\n')[0];
        bool check1 = firstLine.Contains("#");
        if (check1)
        {
            filename_hash = firstLine.Replace("#", "");
        }
        else
        {
            filename_hash = null;
            userInput = " • " + userInput;
        }
        bool check2 = userInput.Contains("\n");
        if (check2)
        {
            userInput = userInput.Replace("\n", "\n • ");
        }
        var randomBinaryData = System.Text.Encoding.UTF8.GetBytes(userInput);
        var fileStream = new MemoryStream(randomBinaryData);
        return fileStream;
    }

    private async Task DownloadNotes()
    {
        DateTime now = DateTime.Now;
        var fileStream = GetFileStream();
        
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        if (String.IsNullOrEmpty(filename_hash))
        {
            var fileName = now.ToString("yyyy_MM_dd_hh_mm_ss_") + "minutes.txt";
            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
        else
        {
            var fileName = filename_hash + ".txt";
            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
    }
}
